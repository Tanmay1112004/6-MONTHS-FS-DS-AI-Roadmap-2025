# -*- coding: utf-8 -*-
"""Student mark prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15kY5qT1BVMLkFMdVOoOZPNXR6kmHTO-J
"""



# Install required packages
!pip install pandas numpy scikit-learn

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import ipywidgets as widgets
from IPython.display import display

# Create and train the model
study_hours = np.array([4, 8, 12, 10, 11, 4, 24, 24, 4]).reshape(-1, 1)
marks = np.array([66.19, 81.93, 97.68, 89.8, 93.74, 66.19, 144.9, 144.9, 66.19])

model = LinearRegression()
model.fit(study_hours, marks)

# Create UI elements
hours_input = widgets.IntSlider(
    value=8,
    min=1,
    max=24,
    step=1,
    description='Study Hours:',
    disabled=False,
    continuous_update=False,
    orientation='horizontal',
    readout=True,
    readout_format='d'
)

predict_button = widgets.Button(
    description='Predict Marks',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click to predict marks',
    icon='check'
)

output = widgets.Output()

def on_button_clicked(b):
    with output:
        output.clear_output()
        hours = hours_input.value
        if hours < 1 or hours > 24:
            print("Please enter valid hours between 1 to 24")
            return

        prediction = model.predict([[hours]])[0].round(2)
        print(f"You will get [{prediction}%] marks when you study [{hours}] hours per day")

        # Store in dataframe
        global df
        df = pd.concat([df, pd.DataFrame({'Study Hours': [hours], 'Predicted Output': [prediction]})],
                      ignore_index=True)
        df.to_csv('smp_data_from_app.csv')

predict_button.on_click(on_button_clicked)

# Display the UI
display(hours_input, predict_button, output)

# Initialize dataframe
df = pd.DataFrame()



# Install required packages
!pip install gradio pandas numpy scikit-learn

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import gradio as gr
import matplotlib.pyplot as plt

# Create and train the model
study_hours = np.array([4, 8, 12, 10, 11, 4, 24, 24, 4]).reshape(-1, 1)
marks = np.array([66.19, 81.93, 97.68, 89.8, 93.74, 66.19, 144.9, 144.9, 66.19])

model = LinearRegression()
model.fit(study_hours, marks)

# Initialize dataframe
df = pd.DataFrame(columns=['Study Hours', 'Predicted Output'])

# Function to predict marks
def predict_marks(hours):
    # Validate input hours
    if hours < 0 or hours > 24:
        return "Please enter valid hours between 1 to 24 if you live on the Earth", None, None

    # Make prediction
    prediction = model.predict([[hours]])[0].round(2)

    # Store in dataframe
    global df
    new_row = pd.DataFrame({'Study Hours': [hours], 'Predicted Output': [prediction]})
    df = pd.concat([df, new_row], ignore_index=True)
    df.to_csv('smp_data_from_app.csv', index=False)

    # Create a visualization
    fig, ax = plt.subplots(figsize=(8, 5))

    # Plot training data
    ax.scatter(study_hours, marks, color='blue', label='Training Data', s=80)

    # Plot prediction
    ax.scatter(hours, prediction, color='red', label='Your Prediction', s=100)

    # Plot regression line
    hours_range = np.linspace(0, 24, 100).reshape(-1, 1)
    predictions_range = model.predict(hours_range)
    ax.plot(hours_range, predictions_range, color='green', label='Regression Line')

    ax.set_xlabel('Study Hours')
    ax.set_ylabel('Predicted Marks (%)')
    ax.set_title('Student Mark Prediction')
    ax.legend()
    ax.grid(True, alpha=0.3)

    plt.tight_layout()

    return f"You will get [{prediction}%] marks when you study [{hours}] hours per day", df, fig

# Create Gradio interface
with gr.Blocks(title="Student Mark Predictor", theme=gr.themes.Soft()) as demo:
    gr.Markdown("# üìö Student Mark Predictor")
    gr.Markdown("Enter the number of study hours to predict your marks percentage.")

    with gr.Row():
        hours_input = gr.Slider(
            minimum=0,
            maximum=24,
            value=8,
            step=1,
            label="Study Hours per Day",
            info="Choose between 1 to 24 hours"
        )

    predict_btn = gr.Button("Predict Marks", variant="primary")

    with gr.Row():
        output_text = gr.Textbox(label="Prediction Result")

    with gr.Row():
        data_table = gr.Dataframe(
            headers=["Study Hours", "Predicted Output"],
            datatype=["number", "number"],
            row_count=5,
            col_count=(2, "fixed"),
            label="Prediction History"
        )

    with gr.Row():
        plot_output = gr.Plot(label="Visualization")

    predict_btn.click(
        fn=predict_marks,
        inputs=hours_input,
        outputs=[output_text, data_table, plot_output]
    )

    # Examples
    gr.Examples(
        examples=[[4], [8], [12], [16], [20]],
        inputs=hours_input,
        outputs=[output_text, data_table, plot_output],
        fn=predict_marks,
        cache_examples=True,
        label="Click on any example below to see the prediction:"
    )

# Launch the interface
demo.launch(debug=True, share=True)





!pip install gradio pandas numpy scikit-learn

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import gradio as gr

# Create and train the model
study_hours = np.array([4, 8, 12, 10, 11, 4, 24, 24, 4]).reshape(-1, 1)
marks = np.array([66.19, 81.93, 97.68, 89.8, 93.74, 66.19, 144.9, 144.9, 66.19])

model = LinearRegression()
model.fit(study_hours, marks)

df = pd.DataFrame(columns=['Study Hours', 'Predicted Output'])

def predict_marks(hours):
    if hours < 1 or hours > 24:
        return "Please enter valid hours between 1 to 24"

    prediction = model.predict([[hours]])[0].round(2)

    global df
    new_row = pd.DataFrame({'Study Hours': [hours], 'Predicted Output': [prediction]})
    df = pd.concat([df, new_row], ignore_index=True)
    df.to_csv('smp_data_from_app.csv', index=False)

    return f"You will get {prediction}% marks when you study {hours} hours per day"

# Create simple interface
iface = gr.Interface(
    fn=predict_marks,
    inputs=gr.Slider(1, 24, value=8, step=1, label="Study Hours"),
    outputs="text",
    title="Student Mark Predictor",
    description="Enter study hours to predict your marks percentage.",
    examples=[[4], [8], [12], [16], [20]]
)

iface.launch(share=True)



# Install required packages (uncomment if running in a fresh env like Colab)
# !pip install gradio pandas numpy scikit-learn plotly

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import gradio as gr
import plotly.graph_objects as go
import time
import os

# -------------------- MODEL --------------------
study_hours = np.array([4, 8, 12, 10, 11, 4, 24, 24, 4]).reshape(-1, 1)
marks = np.array([66.19, 81.93, 97.68, 89.8, 93.74, 66.19, 144.9, 144.9, 66.19])

model = LinearRegression()
model.fit(study_hours, marks)
pred_train = model.predict(study_hours)
R2 = r2_score(marks, pred_train)
slope = float(model.coef_[0])
intercept = float(model.intercept_)

# Load or init history
CSV_PATH = "smp_data_from_app.csv"
if os.path.exists(CSV_PATH):
    try:
        df = pd.read_csv(CSV_PATH)
        if not {"Study Hours", "Predicted Output"}.issubset(df.columns):
            df = pd.DataFrame(columns=['Study Hours', 'Predicted Output'])
    except Exception:
        df = pd.DataFrame(columns=['Study Hours', 'Predicted Output'])
else:
    df = pd.DataFrame(columns=['Study Hours', 'Predicted Output'])

# -------------------- PREDICT FN --------------------
def predict_marks(hours):
    # Validate
    if hours < 1 or hours > 24:
        return (
            "<div class='alert-err'>‚ùå Please enter valid hours between 1 and 24.</div>",
            None, None, None
        )
    time.sleep(0.2)

    prediction = float(model.predict([[hours]])[0].round(2))

    # Update history
    global df
    new_row = pd.DataFrame({'Study Hours': [hours], 'Predicted Output': [prediction]})
    df = pd.concat([df, new_row], ignore_index=True)
    try:
        df.to_csv(CSV_PATH, index=False)
    except Exception:
        pass

    # Regression visualization
    hours_range = np.linspace(0, 24, 120).reshape(-1, 1)
    predictions_range = model.predict(hours_range)

    fig = go.Figure()
    # Train points
    fig.add_trace(go.Scatter(
        x=study_hours.flatten(), y=marks,
        mode='markers', name='Training Data',
        marker=dict(size=9, color='#2563eb', line=dict(width=1.5, color='#1f2937'))
    ))
    # Regression line
    fig.add_trace(go.Scatter(
        x=hours_range.flatten(), y=predictions_range,
        mode='lines', name='Regression Line',
        line=dict(color='#16a34a', width=3)
    ))
    # Current prediction
    fig.add_trace(go.Scatter(
        x=[hours], y=[prediction],
        mode='markers', name='Your Prediction',
        marker=dict(size=14, color='#db2777', line=dict(width=2, color='#1f2937'))
    ))

    fig.update_layout(
        title=f"Marks vs Study Hours ‚Ä¢ Linear Regression  |  R¬≤ = {R2:.3f} ‚Ä¢ slope = {slope:.2f} ‚Ä¢ intercept = {intercept:.2f}",
        xaxis_title='Study Hours per Day',
        yaxis_title='Predicted Marks (%)',
        plot_bgcolor='white',
        paper_bgcolor='rgba(255,255,255,1)',
        font=dict(family="Poppins, Arial, sans-serif", size=12, color="#111827"),
        hovermode='closest',
        margin=dict(l=60, r=20, t=60, b=60)
    )

    # Gauge
    gauge = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=prediction,
        delta={'reference': 70, 'increasing': {'color': "#16a34a"}},
        gauge={
            'axis': {'range': [0, 150], 'tickwidth': 1, 'tickcolor': "#1f2937"},
            'bar': {'color': "#2563eb"},
            'bgcolor': "white",
            'borderwidth': 1,
            'bordercolor': "#e5e7eb",
            'steps': [
                {'range': [0, 50], 'color': '#fee2e2'},
                {'range': [50, 100], 'color': '#ffedd5'},
                {'range': [100, 150], 'color': '#dcfce7'}
            ],
            'threshold': {'line': {'color': "#dc2626", 'width': 3}, 'thickness': 0.8, 'value': 100}
        },
        title={'text': "Performance Gauge"}
    ))
    gauge.update_layout(
        height=260,
        margin=dict(t=30, b=0, l=10, r=10),
        paper_bgcolor='white',
        font={'color': "#111827", 'family': "Poppins, Arial"}
    )

    # Efficiency + helpful copy
    efficiency = round(prediction / hours, 2)
    if prediction >= 90:
        tone = ("üéâ Excellent! You're on track for great results.", "#065f46")
    elif prediction >= 70:
        tone = ("üëç Good job! Keep the momentum going.", "#166534")
    else:
        tone = ("üí™ Try increasing focus time or revising strategy.", "#b45309")

    result_text = f"""
    <div class="card-content">
      <div class="result-title">üìä Prediction Result</div>
      <div class="result-grid">
        <div><span>Study Hours:</span><b>{hours} hr/day</b></div>
        <div><span>Predicted Marks:</span><b>{prediction}%</b></div>
        <div><span>Study Efficiency:</span><b>{efficiency} marks/hr</b></div>
      </div>
      <div class="result-note" style="color:{tone[1]};">{tone[0]}</div>
      <ul class="result-bullets">
        <li>Model: Linear Regression trained on sample study-hour data.</li>
        <li>Assumption: More focused hours ‚Üí higher marks (linearity).</li>
        <li>Tip: Use active recall + spaced repetition for compounding gains.</li>
      </ul>
    </div>
    """

    return result_text, df, fig, gauge

# Clear history
def clear_history():
    global df
    df = pd.DataFrame(columns=['Study Hours', 'Predicted Output'])
    try:
        if os.path.exists(CSV_PATH):
            os.remove(CSV_PATH)
    except Exception:
        pass
    # keep outputs intact except the table we clear
    return df

# -------------------- CSS --------------------
custom_css = """
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');

.gradio-container {
    font-family: 'Poppins', sans-serif !important;
    background: radial-gradient(1200px 600px at 20% 10%, #0ea5e9 0%, transparent 60%),
                radial-gradient(900px 500px at 90% 10%, #8b5cf6 0%, transparent 55%),
                linear-gradient(135deg, #0f172a 0%, #111827 100%) !important;
    color: #111827 !important;
}

/* Generic card look reset */
.card {
    padding: 20px;
    border-radius: 18px;
    box-shadow: 0 10px 28px rgba(0,0,0,0.25);
    color: #111827 !important;
}

/* Distinct cards for visibility */
.card-input {
    background: linear-gradient(160deg, #dbeafe 0%, #bfdbfe 100%) !important; /* Blue */
    border: 1px solid #93c5fd;
}
.card-result {
    background: linear-gradient(160deg, #dcfce7 0%, #bbf7d0 100%) !important; /* Green */
    border: 1px solid #86efac;
}
.card-viz {
    background: linear-gradient(160deg, #fff7ed 0%, #ffedd5 100%) !important; /* Orange */
    border: 1px solid #fdba74;
}
.card-examples {
    background: linear-gradient(160deg, #ede9fe 0%, #ddd6fe 100%) !important; /* Purple */
    border: 1px solid #c4b5fd;
}

/* Headings inside cards */
.card h3, .card h4 {
    margin: 0 0 10px 0;
    color: #0f172a;
}

/* Buttons */
.gradio-button, button {
    background: linear-gradient(135deg, #2563eb 0%, #7c3aed 100%) !important;
    color: white !important;
    border: none !important;
    border-radius: 10px !important;
    padding: 10px 16px !important;
    font-weight: 600 !important;
    transition: transform 0.15s ease, box-shadow 0.15s ease !important;
}
.gradio-button:hover, button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 18px rgba(124,58,237,0.25) !important;
}

/* Helper blocks in result */
.card-content { color:#111827; }
.result-title {
    font-size: 18px; font-weight: 700; margin-bottom: 8px; color:#064e3b;
}
.result-grid {
    display:grid; grid-template-columns: repeat(3, minmax(0,1fr));
    gap:10px; margin: 10px 0 6px 0;
}
.result-grid span { color:#374151; }
.result-note { font-weight: 600; margin: 6px 0 2px 0; }
.result-bullets { margin:10px 0 0 16px; color:#374151; }
.alert-err {
    background:#fee2e2; color:#991b1b; padding:10px 12px; border-radius:10px; font-weight:600;
}
.footer {
    text-align:center; color:#e5e7eb; margin-top:10px; font-size:0.9em;
}
.small-note { color:#374151; font-size: 0.95em; margin-top: 8px; }
"""

# -------------------- UI --------------------
with gr.Blocks(css=custom_css, title="Student Mark Predictor ‚Ä¢ Pro") as demo:
    # Header
    with gr.Column():
        gr.Markdown(
            "<div style='text-align:center; color:#e5e7eb;'>"
            "<h1 style='margin:10px 0 2px 0;'>üéì Student Mark Predictor ‚Ä¢ Pro</h1>"
            "<p style='opacity:0.9;'>Clean UI ‚Ä¢ Clear Insights ‚Ä¢ High Contrast</p>"
            "</div>"
        )

    with gr.Row():
        # ‚öôÔ∏è Input (Blue card)
        with gr.Column(scale=1, elem_classes=["card", "card-input"]):
            gr.Markdown("### ‚öôÔ∏è Input")
            hours_input = gr.Slider(
                1, 24, 8, step=1,
                label="Study Hours per Day",
                info="Select hours between 1 and 24 (inclusive)"
            )
            with gr.Row():
                predict_btn = gr.Button("üöÄ Predict Marks", elem_id="predict-btn")
                reset_btn = gr.Button("üßπ Reset History", elem_id="reset-btn", variant="secondary")
            gr.Markdown(
                "- **Pro tip:** Quality > Quantity. Track focused blocks (Pomodoro 25/5).\n"
                "- **Scope:** Linear model on sample data ‚Äî good for demo & learning."
            )

        # üìä Prediction Result (Green card)
        with gr.Column(scale=2, elem_classes=["card", "card-result"]):
            gr.Markdown("### üìä Prediction Result")
            output_text = gr.HTML()
            with gr.Row():
                with gr.Column(scale=1):
                    gr.Markdown("#### üìã Prediction History")
                    data_table = gr.Dataframe(
                        headers=["Study Hours", "Predicted Output"],
                        datatype=["number", "number"],
                        interactive=False
                    )
                    gr.Markdown(
                        "<div class='small-note'>History persists to <code>smp_data_from_app.csv</code>. "
                        "Use <b>Reset History</b> to clear.</div>"
                    )
                with gr.Column(scale=1):
                    gr.Markdown("#### üéØ Performance Gauge")
                    gauge_plot = gr.Plot()

    # üìà Visualization (Orange card)
    with gr.Row(elem_classes=["card", "card-viz"]):
        gr.Markdown("### üìà Model Visualization")
        plot_output = gr.Plot()
        gr.Markdown(
            "- **Legend:** Blue dots = training data, Green line = regression, Pink dot = your prediction.\n"
            f"- **Model Stats:** R¬≤ = **{R2:.3f}**, Slope = **{slope:.2f}**, Intercept = **{intercept:.2f}**.\n"
            "- **Interpretation:** Marks scale linearly with hours in this toy dataset."
        )

    # üß™ Try Examples (Purple card)
    with gr.Row(elem_classes=["card", "card-examples"]):
        gr.Markdown("### üß™ Try Examples")
        examples = gr.Examples(
            examples=[[4], [8], [12], [16], [20], [24]],
            inputs=hours_input,
            label="Click an example to auto-fill the slider."
        )
        gr.Markdown(
            "- **Starter ideas:** 4h (light day), 12h (heavy grind), 20‚Äì24h (theoretical max).\n"
            "- **Reminder:** Hours represent focused, high-quality study ‚Äî not background time."
        )

    with gr.Column(elem_classes="footer"):
        gr.Markdown("Built with ‚ù§Ô∏è using Gradio + Plotly ‚Ä¢ Student Mark Predictor ‚Ä¢ v4.0")

    # Wiring
    predict_btn.click(
        fn=predict_marks,
        inputs=hours_input,
        outputs=[output_text, data_table, plot_output, gauge_plot]
    )
    hours_input.change(
        fn=predict_marks,
        inputs=hours_input,
        outputs=[output_text, data_table, plot_output, gauge_plot]
    )
    reset_btn.click(
        fn=clear_history,
        inputs=None,
        outputs=data_table
    )

# Launch
if __name__ == "__main__":
    demo.launch(debug=True, share=True)



