# -*- coding: utf-8 -*-
"""Face and eye.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RUBeNeB-YtxBQA9EfLhuNpkgbV7Dbctt

# Face detection
"""

import numpy as np
import cv2
from google.colab.patches import cv2_imshow

# Load the Haar cascade for face detection
face_cascade = cv2.CascadeClassifier(r'/content/haarcascade_frontalface_default.xml')

# Load the image
image = cv2.imread(r'/content/boy.jpg')

# Check if the image is loaded correctely
if image is None:
    print("Error: Image not fount or cannot be loaded!")
    exit()  # Exit if image is not found


# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# detect the face in the image
faces = face_cascade.detectMultiScale(gray, 1.3, 5)

# Check if face are detected
if len(faces) == 0:
    print("No faces found in the image.")
else:
    # Draw rectangle around the face
    for (x, y, w, h) in faces: # (x, y) is the top-left corner, and (w,h) is the width
        cv2.rectangle(image, (x, y), (x + w, y + h), (127, 0, 255), 2)

    # Display the output image
    cv2_imshow(image)



import numpy as np
import cv2
import matplotlib.pyplot as plt

# Load the Haar cascade for face detection
face_cascade = cv2.CascadeClassifier('/content/haarcascade_frontalface_default.xml')

# Load the image
image = cv2.imread('/content/boy.jpg')

# Check if the image is loaded correctly
if image is None:
    print("Error: Image not found or cannot be loaded!")
else:
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Detect faces in the image
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    # Check if faces are detected
    if len(faces) == 0:
        print("No faces found in the image.")
    else:
        # Draw rectangles around detected faces
        for (x, y, w, h) in faces:
            cv2.rectangle(image, (x, y), (x + w, y + h), (127, 0, 255), 2)

        # Convert BGR (OpenCV) image to RGB (matplotlib)
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # Display the output image in Colab
        plt.imshow(image_rgb)
        plt.axis("off")
        plt.show()



"""# Face and eye"""

import cv2
import matplotlib.pyplot as plt

# Load the face and eye Haar cascade classifiers
face_classifier = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
eye_classifier = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_eye_tree_eyeglasses.xml")

# Load the image
img = cv2.imread("/content/boy.jpg")

# Check if the image is loaded correctly
if img is None:
    print("Error: Image not found or cannot be loaded!")
else:
    # Convert image to grayscale for face detection
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Detect faces in the image
    faces = face_classifier.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    if len(faces) == 0:
        print("No Face Found")
    else:
        for (x, y, w, h) in faces:
            # Draw a rectangle around the face
            cv2.rectangle(img, (x, y), (x + w, y + h), (127, 0, 255), 2)

            # Region of interest (ROI) for face
            roi_gray = gray[y:y + h, x:x + w]
            roi_color = img[y:y + h, x:x + w]

            # Detect eyes within the face region
            eyes = eye_classifier.detectMultiScale(roi_gray)
            for (ex, ey, ew, eh) in eyes:
                cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (255, 255, 0), 2)

        # Convert BGR (OpenCV format) to RGB (matplotlib format)
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        # Display image inline in Colab
        plt.imshow(img_rgb)
        plt.axis("off")
        plt.show()



















































